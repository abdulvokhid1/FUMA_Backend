generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}
model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  name             String?
  phone            String?
  accessExpiresAt  DateTime?
  isApproved       Boolean          @default(false)
  paymentMethod    PaymentMethod?
  paymentProofUrl  String?
  role             Role             @default(USER)
  plan             MembershipPlan?  // ‚Üê optional, no @default
  notifications    Notification[]
  hashedRefreshToken String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  submissions      PaymentSubmission[]
  reviewedSubs     PaymentSubmission[] @relation("ReviewedBy")

}

enum Role {
  USER
  ADMIN
}

enum MembershipPlan {
  BASIC
  PRO
  VIP
}
enum PaymentMethod {
  BANK_TRANSFER
  USDT
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}



model PaymentSubmission {
  id               Int             @id @default(autoincrement())
  userId           Int
  user             User            @relation(fields: [userId], references: [id])

  plan             MembershipPlan
  paymentMethod    PaymentMethod
  filePath         String
  fileOriginalName String

  status           SubmissionStatus @default(PENDING)
  adminNote        String?

  reviewedById     Int?
  reviewedBy       User?           @relation("ReviewedBy", fields: [reviewedById], references: [id])
  reviewedAt       DateTime?

  createdAt        DateTime        @default(now())

  @@index([userId])
  @@index([status])
}


model Notification {
  id         Int             @id @default(autoincrement())
  type       String
  message    String
  userId     Int
  createdAt  DateTime        @default(now())
  plan       MembershipPlan?
  isApproved Boolean         @default(false)
  isRead     Boolean         @default(false)
  user       User            @relation(fields: [userId], references: [id])
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// npx prisma migrate reset --force --skip-seed
// npx prisma migrate dev --name baseline_schema
// npx prisma generate
