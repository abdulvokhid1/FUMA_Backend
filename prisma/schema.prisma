generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum MembershipPlan {
  NOMEMBERSHIP
  BASIC
  PRO
  VIP
}

enum PaymentMethod {
  BANK_TRANSFER
  USDT
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

/**
 * ========== Models ==========
 */

model Admin {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  password            String
  createdAt           DateTime            @default(now())
  logs                AdminLog[]
  reviewedSubmissions PaymentSubmission[]
}

model User {
  id                 Int             @id @default(autoincrement())
  email              String          @unique
  password           String
  name               String?
  phone              String?
  isApproved         Boolean         @default(false)
  isPayed            Boolean         @default(false)
  accessExpiresAt    DateTime?
  paymentMethod      PaymentMethod?
  paymentProofUrl    String?
  hashedRefreshToken String?
  role               Role            @default(USER)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  // âœ… Soft delete flags
  isDeleted          Boolean         @default(false)
  deletedAt          DateTime?
  submissions   PaymentSubmission[]
  notifications Notification[]
  resetToken       String?   // hashed token
  resetTokenExpiry DateTime?
   @@index([isDeleted])
}

model PaymentSubmission {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  plan             MembershipPlan
  paymentMethod    PaymentMethod
  filePath         String
  fileOriginalName String
  status           SubmissionStatus @default(PENDING)
  adminNote        String?
  reviewedById     Int?
  reviewedBy       Admin?           @relation(fields: [reviewedById], references: [id])
  reviewedAt       DateTime?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([status])
}

model Notification {
  id         Int             @id @default(autoincrement())
  type       String
  message    String
  userId     Int
  user       User            @relation(fields: [userId], references: [id])
  plan       MembershipPlan?
  isApproved Boolean         @default(false)
  isPayed    Boolean         @default(false)
  isRead     Boolean         @default(false)
  createdAt  DateTime        @default(now())
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ========== NEW MODELS ==========
 */

model MembershipPlanMeta {
  id           Int      @id @default(autoincrement())
  name         String   @unique // e.g., BASIC, PRO
  label        String // Display title
  description  String?
  price        Int // In cents or KRW
  durationDays Int
  features     Json
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
}

model AdminLog {
  id           Int      @id @default(autoincrement())
  adminId      Int
  admin        Admin    @relation(fields: [adminId], references: [id])
  action       String
  targetUserId Int?
  submissionId Int?
  note         String?
  createdAt    DateTime @default(now())
}

model JobQueue {
  id          Int       @id @default(autoincrement())
  type        String // "EXPIRY_REMINDER", etc.
  payload     Json
  scheduledAt DateTime
  processedAt DateTime?
  status      String // PENDING, COMPLETED, FAILED
  createdAt   DateTime  @default(now())
}
